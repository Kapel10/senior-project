{"ast":null,"code":"var _jsxFileName = \"/Users/rakhymzhan/front/event/src/components/Test.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport YandexMap from \"./Map/YandexMap\";\nimport { AutoComplete } from 'antd';\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport { storeFunction } from \"../stores/slices/functionSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n  const dispatch = useDispatch();\n  const [address, setAddress] = useState('');\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [coordinates, setCoordinates] = useState({\n    long: '',\n    lat: ''\n  });\n  const handleSearch = async value => {\n    try {\n      const suggestions = await suggestFunction(value);\n      const optionsArray = suggestions.map(suggest => {\n        var _suggest$data, _suggest$data2;\n        const label = `${suggest.data.street}${suggest.data.house ? ` ${suggest.data.house}` : ''}`;\n        setCoordinates({\n          ...coordinates,\n          long: ((_suggest$data = suggest.data) === null || _suggest$data === void 0 ? void 0 : _suggest$data.geo_lon) || '',\n          lat: ((_suggest$data2 = suggest.data) === null || _suggest$data2 === void 0 ? void 0 : _suggest$data2.geo_lat) || ''\n        });\n        return {\n          value: label,\n          label: label,\n          house: suggest.data.house,\n          street: suggest.data.street,\n          key: suggest.fias_id\n        };\n      });\n      setOptions(optionsArray);\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n    }\n  };\n  const coordinatesMap = (lat, long) => {\n    return {\n      lat,\n      long\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        handleChange();\n      },\n      className: \"border-2 border-solid m-3\",\n      children: \"Yandex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n      placeholder: \"input here\",\n      options: options,\n      onSearch: handleSearch,\n      onChange: value => setInputValue(value),\n      className: \"w-[200px]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        dispatch(storeFunction(coordinatesMap(coordinates.lat, coordinates.long)));\n      },\n      className: \"border-2 border-solid m-3\",\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YandexMap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), coordinates.lat, \" \", coordinates.long]\n  }, void 0, true);\n}\n_s(Test, \"LsScZ2ix7Yd5/68WJfV9C1EHuXg=\", false, function () {\n  return [useDispatch];\n});\n_c = Test;\nfunction handleChange() {\n  const apiKey = \"e6bf205f-4dce-4574-979d-9bba7be66812\";\n  const searchText = \"город Астана, ул кабанбай батыра 53 блок д1\";\n\n  // Construct the URL\n  const apiUrl = `https://suggest-maps.yandex.ru/v1/suggest?apikey=${apiKey}&text=${searchText}&types=house,street&results=10`;\n\n  // Make the request using the fetch function\n  fetch(apiUrl).then(response => response.json()).then(data => {\n    {\n      const arr = data.results.filter(addr => addr.subtitle.text === \"Астана\");\n      console.log(arr);\n    }\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\nexport const suggestFunction = async value => {\n  const url = 'http://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address';\n  const token = '5e402b86a708e261e916f1f65c9d38bbb3c0ff7e';\n  const query = `ул ${value}`;\n  const city = 'Астана';\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `Token ${token}`\n    }\n  };\n  const data = {\n    query: query,\n    locations: [{\n      city: city,\n      country: \"*\"\n    }]\n  };\n  try {\n    const response = await axios.post(url, data, config);\n    console.log(response);\n    return response.data.suggestions;\n    /*\n    response.data.suggestions.map((suggest: any) => {\n        const lat = suggest.data.geo_lat;\n        const long = suggest.data.geo_lon;\n        const house = suggest.data.house;\n        const street = suggest.data.street;\n        console.log('The address is ', street,house)\n        console.log('The coordinates are ', lat, long)\n    )\n     */\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","YandexMap","AutoComplete","axios","useDispatch","storeFunction","jsxDEV","_jsxDEV","Fragment","_Fragment","Test","_s","dispatch","address","setAddress","options","setOptions","inputValue","setInputValue","coordinates","setCoordinates","long","lat","handleSearch","value","suggestions","suggestFunction","optionsArray","map","suggest","_suggest$data","_suggest$data2","label","data","street","house","geo_lon","geo_lat","key","fias_id","error","console","coordinatesMap","children","onClick","handleChange","className","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onSearch","onChange","_c","apiKey","searchText","apiUrl","fetch","then","response","json","arr","results","filter","addr","subtitle","text","log","catch","url","token","query","city","config","headers","Accept","Authorization","locations","country","post","$RefreshReg$"],"sources":["/Users/rakhymzhan/front/event/src/components/Test.tsx"],"sourcesContent":["import React,{ useState, useEffect } from \"react\";\nimport YandexMap from \"./Map/YandexMap\";\nimport { AutoComplete } from 'antd';\nimport axios from \"axios\";\nimport {useDispatch} from \"react-redux\";\nimport {storeFunction} from \"../stores/slices/functionSlice\";\n\ntype MyObjectType = {\n    value: string;\n    label: string;\n    house?: string;\n    street: string;\n    geo_lon: string;\n    geo_lat: string;\n    fias_id: string;\n};\nexport default function Test() {\n    const dispatch = useDispatch();\n    const [address, setAddress] = useState('');\n    const [options, setOptions] = useState<MyObjectType[]>([]);\n    const [inputValue, setInputValue] = useState('');\n    const [coordinates, setCoordinates] = useState({\n        long: '',\n        lat: ''\n    })\n    const handleSearch = async (value: string) => {\n        try {\n            const suggestions = await suggestFunction(value);\n            const optionsArray: MyObjectType[] = suggestions.map((suggest: any) => {\n                const label = `${suggest.data.street}${suggest.data.house ? ` ${suggest.data.house}` : ''}`;\n                setCoordinates({\n                    ...coordinates,\n                    long: suggest.data?.geo_lon || '',\n                    lat: suggest.data?.geo_lat || ''\n                });\n                return {\n                    value: label,\n                    label: label,\n                    house: suggest.data.house,\n                    street: suggest.data.street,\n                    key: suggest.fias_id,\n                };\n            });\n            setOptions(optionsArray);\n        } catch (error) {\n            console.error(\"Error fetching suggestions:\", error);\n        }\n    };\n\n    const coordinatesMap = (lat?: string, long?: string) => {\n        return {lat, long}\n    }\n\n    return (\n        <>\n            <button onClick={()=>{handleChange()}} className='border-2 border-solid m-3'>Yandex</button>\n            <AutoComplete  placeholder=\"input here\" options={options} onSearch={handleSearch} onChange={(value) => setInputValue(value)} className='w-[200px]'/>\n            <button onClick={()=> {dispatch(storeFunction(coordinatesMap(coordinates.lat,coordinates.long)))}} className='border-2 border-solid m-3'>Search</button>\n            <YandexMap/>\n            {coordinates.lat} {coordinates.long}\n\n        </>\n    );\n}\n\nfunction handleChange() {\n    const apiKey = \"e6bf205f-4dce-4574-979d-9bba7be66812\";\n    const searchText = \"город Астана, ул кабанбай батыра 53 блок д1\";\n\n    // Construct the URL\n    const apiUrl = `https://suggest-maps.yandex.ru/v1/suggest?apikey=${apiKey}&text=${searchText}&types=house,street&results=10`;\n\n    // Make the request using the fetch function\n    fetch(apiUrl)\n        .then((response) => response.json())\n        .then((data) => {\n            {\n                const arr = data.results.filter(\n                    (addr:any) => addr.subtitle.text === \"Астана\"\n                );\n                console.log(arr);\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error:\", error);\n        });\n}\n\nexport const suggestFunction = async(value: string) => {\n    const url  = 'http://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address';\n    const token = '5e402b86a708e261e916f1f65c9d38bbb3c0ff7e';\n    const query = `ул ${value}`;\n    const city = 'Астана';\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n            Authorization: `Token ${token}`,\n        },\n    };\n    const data = {\n        query: query,\n        locations: [\n            {\n                city: city,\n                country: \"*\",\n            },\n        ],\n    };\n\n    try {\n        const response = await axios.post(url, data, config);\n        console.log(response)\n        return response.data.suggestions\n        /*\n        response.data.suggestions.map((suggest: any) => {\n            const lat = suggest.data.geo_lat;\n            const long = suggest.data.geo_lon;\n            const house = suggest.data.house;\n            const street = suggest.data.street;\n            console.log('The address is ', street,house)\n            console.log('The coordinates are ', lat, long)\n        )\n         */\n    }\n catch (error) {\n    console.error(\"Error:\", error);\n}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}