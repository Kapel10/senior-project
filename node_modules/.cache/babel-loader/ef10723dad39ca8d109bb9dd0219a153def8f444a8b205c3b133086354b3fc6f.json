{"ast":null,"code":"var _jsxFileName = \"/Users/rakhymzhan/front/event/src/components/Test.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport YandexMap from \"./Map/YandexMap\";\nimport { AutoComplete } from 'antd';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n  const [address, setAddress] = useState('');\n  const [options, setOptions] = useState([]);\n  const vals = ['one', 'two'];\n  const optionsArray = vals.map(value => ({\n    value,\n    label: value\n  }));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n      placeholder: \"input here\",\n      options: optionsArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"border-2 border-solid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YandexMap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Test, \"bs0L2mAfC0rOQ0O+0t1Q9iVduVk=\");\n_c = Test;\nexport const suggestFunction = async () => {\n  const url = 'http://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address';\n  const token = '5e402b86a708e261e916f1f65c9d38bbb3c0ff7e';\n  const query = 'ул Туркестан 28/2';\n  const city = 'Астана';\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `Token ${token}`\n    }\n  };\n  const data = {\n    query: query,\n    locations: [{\n      city: city,\n      country: \"*\"\n    }]\n  };\n  try {\n    const response = await axios.post(url, data, config);\n    console.log(response);\n    return response.data.suggestions;\n    /*\n    response.data.suggestions.map((suggest: any) => {\n        const lat = suggest.data.geo_lat;\n        const long = suggest.data.geo_lon;\n        const house = suggest.data.house;\n        const street = suggest.data.street;\n        console.log('The address is ', street,house)\n        console.log('The coordinates are ', lat, long)\n    )\n     */\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n/*\n\n   useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const suggestions = await suggestFunction();\n                setOptions(suggestions);\n            } catch (error) {\n                console.error(\"Error fetching suggestions:\", error);\n            }\n        };\n\n        fetchData(); // Call the async function within the useEffect\n    }, []); // Empty dependency array means this effect runs once after the initial render\n */\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","YandexMap","AutoComplete","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Test","_s","address","setAddress","options","setOptions","vals","optionsArray","map","value","label","children","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","className","_c","suggestFunction","url","token","query","city","config","headers","Accept","Authorization","data","locations","country","response","post","console","log","suggestions","error","$RefreshReg$"],"sources":["/Users/rakhymzhan/front/event/src/components/Test.tsx"],"sourcesContent":["import React,{ useState, useEffect } from \"react\";\nimport YandexMap from \"./Map/YandexMap\";\nimport { AutoComplete } from 'antd';\nimport axios from \"axios\";\n\ntype MyObjectType = Record<string, unknown>;\nexport default function Test() {\n    const [address, setAddress] = useState('');\n    const [options, setOptions] = useState<MyObjectType[]>([]);\n\n    const vals = ['one', 'two']\n    const optionsArray = vals.map(value => ({ value, label: value }));\n\n    return (\n        <>\n            <AutoComplete  placeholder=\"input here\" options={optionsArray}/>\n            <input type='text' className='border-2 border-solid'/>\n            <YandexMap/>\n        </>\n    );\n}\n\n\n\nexport const suggestFunction = async() => {\n    const url  = 'http://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address';\n    const token = '5e402b86a708e261e916f1f65c9d38bbb3c0ff7e';\n    const query = 'ул Туркестан 28/2';\n    const city = 'Астана';\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n            Authorization: `Token ${token}`,\n        },\n    };\n    const data = {\n        query: query,\n        locations: [\n            {\n                city: city,\n                country: \"*\",\n            },\n        ],\n    };\n\n    try {\n        const response = await axios.post(url, data, config);\n        console.log(response)\n        return response.data.suggestions\n        /*\n        response.data.suggestions.map((suggest: any) => {\n            const lat = suggest.data.geo_lat;\n            const long = suggest.data.geo_lon;\n            const house = suggest.data.house;\n            const street = suggest.data.street;\n            console.log('The address is ', street,house)\n            console.log('The coordinates are ', lat, long)\n        )\n         */\n    }\n catch (error) {\n    console.error(\"Error:\", error);\n}\n\n}\n/*\n\n   useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const suggestions = await suggestFunction();\n                setOptions(suggestions);\n            } catch (error) {\n                console.error(\"Error fetching suggestions:\", error);\n            }\n        };\n\n        fetchData(); // Call the async function within the useEffect\n    }, []); // Empty dependency array means this effect runs once after the initial render\n */"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAmB,OAAO;AACjD,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,YAAY,QAAQ,MAAM;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG1B,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAiB,EAAE,CAAC;EAE1D,MAAMc,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;EAC3B,MAAMC,YAAY,GAAGD,IAAI,CAACE,GAAG,CAACC,KAAK,KAAK;IAAEA,KAAK;IAAEC,KAAK,EAAED;EAAM,CAAC,CAAC,CAAC;EAEjE,oBACIZ,OAAA,CAAAE,SAAA;IAAAY,QAAA,gBACId,OAAA,CAACH,YAAY;MAAEkB,WAAW,EAAC,YAAY;MAACR,OAAO,EAAEG;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChEnB,OAAA;MAAOoB,IAAI,EAAC,MAAM;MAACC,SAAS,EAAC;IAAuB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACtDnB,OAAA,CAACJ,SAAS;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eACd,CAAC;AAEX;AAACf,EAAA,CAduBD,IAAI;AAAAmB,EAAA,GAAJnB,IAAI;AAkB5B,OAAO,MAAMoB,eAAe,GAAG,MAAAA,CAAA,KAAW;EACtC,MAAMC,GAAG,GAAI,qEAAqE;EAClF,MAAMC,KAAK,GAAG,0CAA0C;EACxD,MAAMC,KAAK,GAAG,mBAAmB;EACjC,MAAMC,IAAI,GAAG,QAAQ;EACrB,MAAMC,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClCC,MAAM,EAAE,kBAAkB;MAC1BC,aAAa,EAAG,SAAQN,KAAM;IAClC;EACJ,CAAC;EACD,MAAMO,IAAI,GAAG;IACTN,KAAK,EAAEA,KAAK;IACZO,SAAS,EAAE,CACP;MACIN,IAAI,EAAEA,IAAI;MACVO,OAAO,EAAE;IACb,CAAC;EAET,CAAC;EAED,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMrC,KAAK,CAACsC,IAAI,CAACZ,GAAG,EAAEQ,IAAI,EAAEJ,MAAM,CAAC;IACpDS,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrB,OAAOA,QAAQ,CAACH,IAAI,CAACO,WAAW;IAChC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CACJ,OAAOC,KAAK,EAAE;IACXH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,IAAAlB,EAAA;AAAAmB,YAAA,CAAAnB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}