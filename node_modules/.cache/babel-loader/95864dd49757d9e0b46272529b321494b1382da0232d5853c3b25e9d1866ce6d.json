{"ast":null,"code":"var _jsxFileName = \"/Users/rakhymzhan/front/event/src/components/Map/YandexMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { YMaps, Map, Placemark } from '@pbe/react-yandex-maps';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapOptions = {\n  // Disable Yandex Map controls and information\n  suppressMapOpenBlock: true,\n  suppressMapAutoFocus: true,\n  suppressTrafficButton: true,\n  suppressZoomControl: true,\n  suppressMapTypeControl: true,\n  suppressSatelliteHybridControl: true,\n  suppressFullScreenControl: true,\n  suppressSearchControl: true\n};\nexport const YandexMap = ({\n  x,\n  y,\n  lat,\n  lg\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const astanaCoordinates = [51.12646248759976, 71.42314508372331];\n  const mapState = {\n    center: astanaCoordinates,\n    zoom: 12\n  };\n  const [userCoords, setUserCoords] = useState(null);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setUserCoords([latitude, longitude]);\n        locationZoom(latitude, longitude);\n      }, error => {\n        console.error('Error getting user coordinates:', error);\n      });\n    } else {\n      console.error('Geolocation is not supported by your browser');\n    }\n  }, []);\n  useEffect(() => {\n    if (lat != null && lg != null) {\n      locationZoom(lat, lg);\n    }\n  }, [lat, lg]);\n  const locationZoom = (x, y) => {\n    if (mapRef.current) {\n      const mapInstance = mapRef.current;\n      mapInstance.setCenter([x, y]);\n      mapInstance.setZoom(15); // Adjust the zoom level as needed\n      console.log(1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(YMaps, {\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      defaultState: mapState,\n      defaultOptions: mapOptions,\n      style: {\n        width: `${x}px`,\n        height: `${y}px`\n      },\n      instanceRef: mapRef,\n      children: [userCoords && /*#__PURE__*/_jsxDEV(Placemark, {\n        geometry: userCoords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(Placemark, {\n        geometry: [lat, lg]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(YandexMap, \"6rAEAqCgri4EykWJD8XHVJEVq7E=\");\n_c = YandexMap;\nexport default YandexMap;\n\n/*\n const handleFunction = useSelector((state: RootState) => state.functionStore.function)\n    console.log(handleFunction)\n\n        const x1 = handleFunction?.lat;\n    const y1 = handleFunction?.long;\n\n         {x !== null && <Placemark geometry={[x1,y1]} /> }\n\n\n         options={{\n                    iconLayout: 'default#image',\n                    ...calculateIconOptions(),\n                    iconImageHref: 'data:image/svg+xml,' + encodeURIComponent(svgContent),\n                }}\n                                          properties={{\n                                              iconContent: `<div className='w-auto h-screen max-w-[20px] max-h-[20px]'></div>`,\n                                          }} />}\n\n                                            const icon = <img width=\"40\" height=\"40\" src=\"https://img.icons8.com/ultraviolet/40/100-percents.png\"\n                      alt=\"100-percents\"/>\n\n    const svgContent = `\n<img width=\"48\" height=\"48\" src=\"https://img.icons8.com/emoji/48/blue-circle-emoji.png\" alt=\"blue-circle-emoji\"/>\n\n  `;\n\n\n    const calculateIconOptions = () => {\n        // Calculate icon size based on map size\n        const iconWidth = Math.min(mapSize.width * 0.03, 30); // Adjust as needed\n        const iconHeight = Math.min(mapSize.height * 0.03, 42); // Adjust as needed\n\n        // Calculate icon offset based on icon size\n        const offsetX = -iconWidth / 2;\n        const offsetY = -iconHeight / 2;\n\n        return {\n            iconImageSize: [iconWidth, iconHeight],\n            iconImageOffset: [offsetX, offsetY],\n        };\n    };\n\n      const [mapSize, setMapSize] = useState({ width: x, height: y }); // Initial map size\n\n    const handleBoundsChange = (event: any) => {\n        const { originalEvent } = event;\n        const newMapSize = {\n            width: originalEvent.currentTarget.clientWidth,\n            height: originalEvent.currentTarget.clientHeight,\n        };\n        setMapSize(newMapSize);\n    };\n */\nvar _c;\n$RefreshReg$(_c, \"YandexMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","YMaps","Map","Placemark","jsxDEV","_jsxDEV","mapOptions","suppressMapOpenBlock","suppressMapAutoFocus","suppressTrafficButton","suppressZoomControl","suppressMapTypeControl","suppressSatelliteHybridControl","suppressFullScreenControl","suppressSearchControl","YandexMap","x","y","lat","lg","_s","mapRef","astanaCoordinates","mapState","center","zoom","userCoords","setUserCoords","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","locationZoom","error","console","current","mapInstance","setCenter","setZoom","log","children","defaultState","defaultOptions","style","width","height","instanceRef","geometry","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rakhymzhan/front/event/src/components/Map/YandexMap.tsx"],"sourcesContent":["import React, {FC, useEffect, useRef, useState} from 'react';\nimport {YMaps, Map, Placemark} from '@pbe/react-yandex-maps';\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../stores/store\";\nexport interface Coordinates{\n    x: number;\n    y: number;\n    lat?: number;\n    lg?: number;\n}\nconst mapOptions = {\n    // Disable Yandex Map controls and information\n    suppressMapOpenBlock: true,\n    suppressMapAutoFocus: true,\n    suppressTrafficButton: true,\n    suppressZoomControl: true,\n    suppressMapTypeControl: true,\n    suppressSatelliteHybridControl: true,\n    suppressFullScreenControl: true,\n    suppressSearchControl: true,\n};\n\nexport const YandexMap: FC<Coordinates> = ({x,y, lat, lg}) => {\n\n    const mapRef = useRef<any>(null);\n    const astanaCoordinates = [51.12646248759976, 71.42314508372331];\n    const mapState = {center: astanaCoordinates, zoom: 12};\n\n    const [userCoords, setUserCoords] = useState<number[] | null>(null);\n\n    useEffect(() => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const {latitude, longitude} = position.coords;\n                    setUserCoords([latitude, longitude]);\n                    locationZoom(latitude, longitude);\n                },\n                (error) => {\n                    console.error('Error getting user coordinates:', error);\n                }\n            );\n        } else {\n            console.error('Geolocation is not supported by your browser');\n        }\n    }, []);\n\n    useEffect(() => {\n        if (lat != null && lg != null) {\n            locationZoom(lat, lg);\n        }\n    }, [lat,lg]);\n\n    const locationZoom = (x: number, y: number) => {\n        if (mapRef.current) {\n            const mapInstance = mapRef.current;\n            mapInstance.setCenter([x, y]);\n            mapInstance.setZoom(15); // Adjust the zoom level as needed\n            console.log(1)\n        }\n    }\n\n\n    return (\n        <YMaps>\n            <Map defaultState={mapState} defaultOptions={mapOptions} style={{width: `${x}px`, height: `${y}px`}}\n                 instanceRef={mapRef}\n            >\n                {userCoords && <Placemark geometry={userCoords} />}\n                {<Placemark geometry={[lat,lg]}  />}\n            </Map>\n        </YMaps>\n    );\n}\n\nexport default YandexMap;\n\n\n/*\n const handleFunction = useSelector((state: RootState) => state.functionStore.function)\n    console.log(handleFunction)\n\n        const x1 = handleFunction?.lat;\n    const y1 = handleFunction?.long;\n\n         {x !== null && <Placemark geometry={[x1,y1]} /> }\n\n\n         options={{\n                    iconLayout: 'default#image',\n                    ...calculateIconOptions(),\n                    iconImageHref: 'data:image/svg+xml,' + encodeURIComponent(svgContent),\n                }}\n                                          properties={{\n                                              iconContent: `<div className='w-auto h-screen max-w-[20px] max-h-[20px]'></div>`,\n                                          }} />}\n\n                                            const icon = <img width=\"40\" height=\"40\" src=\"https://img.icons8.com/ultraviolet/40/100-percents.png\"\n                      alt=\"100-percents\"/>\n\n    const svgContent = `\n<img width=\"48\" height=\"48\" src=\"https://img.icons8.com/emoji/48/blue-circle-emoji.png\" alt=\"blue-circle-emoji\"/>\n\n  `;\n\n\n    const calculateIconOptions = () => {\n        // Calculate icon size based on map size\n        const iconWidth = Math.min(mapSize.width * 0.03, 30); // Adjust as needed\n        const iconHeight = Math.min(mapSize.height * 0.03, 42); // Adjust as needed\n\n        // Calculate icon offset based on icon size\n        const offsetX = -iconWidth / 2;\n        const offsetY = -iconHeight / 2;\n\n        return {\n            iconImageSize: [iconWidth, iconHeight],\n            iconImageOffset: [offsetX, offsetY],\n        };\n    };\n\n      const [mapSize, setMapSize] = useState({ width: x, height: y }); // Initial map size\n\n    const handleBoundsChange = (event: any) => {\n        const { originalEvent } = event;\n        const newMapSize = {\n            width: originalEvent.currentTarget.clientWidth,\n            height: originalEvent.currentTarget.clientHeight,\n        };\n        setMapSize(newMapSize);\n    };\n */"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}