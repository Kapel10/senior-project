{"ast":null,"code":"var _jsxFileName = \"/Users/rakhymzhan/front/event/src/components/Event/EventCreation/EventLocation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport YandexMap from \"../../Map/YandexMap\";\nimport { AutoComplete } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventLocation = () => {\n  _s();\n  const [vars, setVars] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  function handleChange(value) {\n    const apiKey = 'e6bf205f-4dce-4574-979d-9bba7be66812';\n    const searchText = `город Астана, ул ${value}`;\n    const apiUrl = `https://suggest-maps.yandex.ru/v1/suggest?apikey=${apiKey}&text=${searchText}&types=house,street&results=10`;\n    fetch(apiUrl).then(response => response.json()).then(data => {\n      const arr = data.results.filter(addr => addr.subtitle.text === \"Астана\");\n      console.log(arr);\n      const result = arr.map(address => {\n        return {\n          value: address.title.text,\n          label: address.title.text\n        };\n      });\n      setVars(result);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }\n  const handleLocation = value => {\n    const apiKey = '2eb6b6ac-e941-4da8-84ff-c94746e481a4';\n    const address = `Казахстан,Астана, ${value}`;\n    const apiUrl = `https://geocode-maps.yandex.ru/1.x/?apikey=${apiKey}&geocode=${encodeURIComponent(address)}`;\n    fetch(apiUrl).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.text();\n    }).then(data => {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(data, \"text/xml\");\n      const featureNodes = xmlDoc.querySelectorAll(\"GeoObject\");\n      for (const featureNode of featureNodes) {\n        const addressNode = featureNode.querySelector(\"GeocoderMetaData text\");\n        const address = addressNode ? addressNode.textContent : null;\n        const posNode = featureNode.querySelector(\"Point pos\");\n        const coordinates = (posNode === null || posNode === void 0 ? void 0 : posNode.textContent) !== null ? posNode === null || posNode === void 0 ? void 0 : posNode.textContent.split(\" \") : null;\n        if (address && coordinates) {\n          const latitude = coordinates[1];\n          const longitude = coordinates[0];\n          console.log(\"Address:\", address);\n          console.log(\"Latitude:\", latitude);\n          console.log(\"Longitude:\", longitude);\n          break;\n        } else {\n          console.log(\"Address or Coordinates not found for a feature\");\n        }\n      }\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mx-auto w-[1000px] font-inter\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-[40px] text-2xl border-b-[1px] border-b-gray-200\",\n        children: \"Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-x-5 my-[20px] items-center\",\n        children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n          onSearch: handleChange,\n          options: vars,\n          onChange: value => setInputValue(value),\n          className: \"w-[500px] h-[50px] block outline-none bg-gray-100 rounded-[10px] \",\n          placeholder: \"Set Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleLocation(inputValue),\n          className: \"border-[1px] h-[30px] rounded-[15px] px-3 py-1 border-black text-xl flex items-center\",\n          children: \"Set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YandexMap, {\n        x: 800,\n        y: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(EventLocation, \"M4eC0nv5WUsB255yyadkwAXELYg=\");\n_c = EventLocation;\nexport default EventLocation;\n\n/*\n\n <input placeholder='Set location' className='w-[500px] h-[50px] block outline-none bg-gray-100 rounded-[10px] p-5 my-[20px]'\n                onChange={}\n                />\n */\nvar _c;\n$RefreshReg$(_c, \"EventLocation\");","map":{"version":3,"names":["React","useState","YandexMap","AutoComplete","jsxDEV","_jsxDEV","Fragment","_Fragment","EventLocation","_s","vars","setVars","inputValue","setInputValue","handleChange","value","apiKey","searchText","apiUrl","fetch","then","response","json","data","arr","results","filter","addr","subtitle","text","console","log","result","map","address","title","label","catch","error","handleLocation","encodeURIComponent","ok","Error","parser","DOMParser","xmlDoc","parseFromString","featureNodes","querySelectorAll","featureNode","addressNode","querySelector","textContent","posNode","coordinates","split","latitude","longitude","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","options","onChange","placeholder","onClick","x","y","_c","$RefreshReg$"],"sources":["/Users/rakhymzhan/front/event/src/components/Event/EventCreation/EventLocation.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport YandexMap from \"../../Map/YandexMap\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../../stores/store\";\nimport {AutoComplete} from \"antd\";\n\ntype Yandex = {\n    value: string;\n    label: string;\n}\nconst EventLocation = () => {\n    const [vars, setVars] = useState<Yandex[]>([])\n    const [inputValue, setInputValue] = useState('');\n    function handleChange(value: string) {\n        const apiKey = 'e6bf205f-4dce-4574-979d-9bba7be66812';\n        const searchText = `город Астана, ул ${value}`;\n        const apiUrl = `https://suggest-maps.yandex.ru/v1/suggest?apikey=${apiKey}&text=${searchText}&types=house,street&results=10`;\n\n        fetch(apiUrl)\n            .then((response) => response.json())\n            .then((data) => {\n                const arr = data.results.filter(\n                    (addr:any) => addr.subtitle.text === \"Астана\"\n                );\n                console.log(arr)\n                const result: Yandex[] = arr.map((address:any) => {\n                    return {\n                        value: address.title.text,\n                        label: address.title.text\n                    }\n                })\n                setVars(result)\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n    const handleLocation = (value: string) => {\n        const apiKey = '2eb6b6ac-e941-4da8-84ff-c94746e481a4';\n        const address = `Казахстан,Астана, ${value}`;\n\n        const apiUrl = `https://geocode-maps.yandex.ru/1.x/?apikey=${apiKey}&geocode=${encodeURIComponent(\n            address\n        )}`;\n\n        fetch(apiUrl)\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(\"Network response was not ok\");\n                }\n                return response.text();\n            })\n            .then((data) => {\n                const parser = new DOMParser();\n                const xmlDoc = parser.parseFromString(data, \"text/xml\");\n\n                const featureNodes = xmlDoc.querySelectorAll(\"GeoObject\");\n                for (const featureNode of featureNodes) {\n                    const addressNode = featureNode.querySelector(\"GeocoderMetaData text\");\n                    const address = addressNode ? addressNode.textContent : null;\n                    const posNode = featureNode.querySelector(\"Point pos\");\n                    const coordinates = posNode?.textContent !== null ? posNode?.textContent.split(\" \") : null;\n\n                    if (address && coordinates) {\n                        const latitude = coordinates[1];\n                        const longitude = coordinates[0];\n                        console.log(\"Address:\", address);\n                        console.log(\"Latitude:\", latitude);\n                        console.log(\"Longitude:\", longitude);\n                        break;\n                    } else {\n                        console.log(\"Address or Coordinates not found for a feature\");\n                    }\n\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n\n\n    return (\n        <>\n            <div className='mx-auto w-[1000px] font-inter'>\n                <div className='w-full h-[40px] text-2xl border-b-[1px] border-b-gray-200'>Location</div>\n                <div className='flex gap-x-5 my-[20px] items-center'>\n                    <AutoComplete onSearch={handleChange} options={vars} onChange={(value) => setInputValue(value)} className='w-[500px] h-[50px] block outline-none bg-gray-100 rounded-[10px] ' placeholder='Set Location' />\n                    <button onClick={()=> handleLocation(inputValue)} className='border-[1px] h-[30px] rounded-[15px] px-3 py-1 border-black text-xl flex items-center'>Set</button>\n                </div>\n                <YandexMap x={800} y={300}/>\n            </div>\n        </>\n    )\n}\n\nexport default EventLocation;\n\n/*\n\n <input placeholder='Set location' className='w-[500px] h-[50px] block outline-none bg-gray-100 rounded-[10px] p-5 my-[20px]'\n                onChange={}\n                />\n */"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}