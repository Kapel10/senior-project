{"ast":null,"code":"var _jsxFileName = \"/Users/rakhymzhan/front/event/src/components/Test.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport YandexMap from \"./Map/YandexMap\";\nimport { AutoComplete } from 'antd';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n  const [address, setAddress] = useState('');\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [coordinates, setCoordinates] = useState({\n    long: '',\n    lat: ''\n  });\n  const handleSearch = async value => {\n    try {\n      const suggestions = await suggestFunction(value);\n      const optionsArray = suggestions.map(suggest => {\n        var _suggest$data, _suggest$data2;\n        const label = `${suggest.data.street}${suggest.data.house ? ` ${suggest.data.house}` : ''}`;\n        setCoordinates({\n          ...coordinates,\n          long: (_suggest$data = suggest.data) === null || _suggest$data === void 0 ? void 0 : _suggest$data.geo_lon\n        });\n        setCoordinates({\n          ...coordinates,\n          lat: (_suggest$data2 = suggest.data) === null || _suggest$data2 === void 0 ? void 0 : _suggest$data2.geo_lat\n        });\n        return {\n          value: label,\n          label: label,\n          house: suggest.data.house,\n          street: suggest.data.street\n        };\n      });\n      setOptions(optionsArray);\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n      placeholder: \"input here\",\n      options: options,\n      onSearch: handleSearch,\n      onChange: value => setInputValue(value),\n      className: \"w-[200px]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YandexMap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), coordinates.long, \" \", coordinates.lat]\n  }, void 0, true);\n}\n_s(Test, \"Si/1ajDCjX8FOtGRIxkwO0GmOkU=\");\n_c = Test;\nexport const suggestFunction = async value => {\n  const url = 'http://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address';\n  const token = '5e402b86a708e261e916f1f65c9d38bbb3c0ff7e';\n  const query = `ул ${value}`;\n  const city = 'Астана';\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `Token ${token}`\n    }\n  };\n  const data = {\n    query: query,\n    locations: [{\n      city: city,\n      country: \"*\"\n    }]\n  };\n  try {\n    const response = await axios.post(url, data, config);\n    console.log(response);\n    return response.data.suggestions;\n    /*\n    response.data.suggestions.map((suggest: any) => {\n        const lat = suggest.data.geo_lat;\n        const long = suggest.data.geo_lon;\n        const house = suggest.data.house;\n        const street = suggest.data.street;\n        console.log('The address is ', street,house)\n        console.log('The coordinates are ', lat, long)\n    )\n     */\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","YandexMap","AutoComplete","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Test","_s","address","setAddress","options","setOptions","inputValue","setInputValue","coordinates","setCoordinates","long","lat","handleSearch","value","suggestions","suggestFunction","optionsArray","map","suggest","_suggest$data","_suggest$data2","label","data","street","house","geo_lon","geo_lat","error","console","children","placeholder","onSearch","onChange","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","url","token","query","city","config","headers","Accept","Authorization","locations","country","response","post","log","$RefreshReg$"],"sources":["/Users/rakhymzhan/front/event/src/components/Test.tsx"],"sourcesContent":["import React,{ useState, useEffect } from \"react\";\nimport YandexMap from \"./Map/YandexMap\";\nimport { AutoComplete } from 'antd';\nimport axios from \"axios\";\n\ntype MyObjectType = {\n    value: string;\n    label: string;\n    house?: string;\n    street: string;\n    lon: string;\n    lat: string;\n};\nexport default function Test() {\n    const [address, setAddress] = useState('');\n    const [options, setOptions] = useState<MyObjectType[]>([]);\n    const [inputValue, setInputValue] = useState('');\n    const [coordinates, setCoordinates] = useState({\n        long: '',\n        lat: ''\n    })\n    const handleSearch = async (value: string) => {\n        try {\n            const suggestions = await suggestFunction(value);\n            const optionsArray: MyObjectType[] = suggestions.map((suggest: any) => {\n                const label = `${suggest.data.street}${suggest.data.house ? ` ${suggest.data.house}` : ''}`;\n                setCoordinates({...coordinates, long: suggest.data?.geo_lon})\n                setCoordinates({...coordinates, lat: suggest.data?.geo_lat})\n                return {\n                    value: label,\n                    label: label,\n                    house: suggest.data.house,\n                    street: suggest.data.street,\n                };\n            });\n            setOptions(optionsArray);\n        } catch (error) {\n            console.error(\"Error fetching suggestions:\", error);\n        }\n    };\n\n    return (\n        <>\n            <AutoComplete  placeholder=\"input here\" options={options} onSearch={handleSearch} onChange={(value) => setInputValue(value)} className='w-[200px]'/>\n            <YandexMap/>\n            {coordinates.long} {coordinates.lat}\n        </>\n    );\n}\n\n\n\nexport const suggestFunction = async(value: string) => {\n    const url  = 'http://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address';\n    const token = '5e402b86a708e261e916f1f65c9d38bbb3c0ff7e';\n    const query = `ул ${value}`;\n    const city = 'Астана';\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n            Authorization: `Token ${token}`,\n        },\n    };\n    const data = {\n        query: query,\n        locations: [\n            {\n                city: city,\n                country: \"*\",\n            },\n        ],\n    };\n\n    try {\n        const response = await axios.post(url, data, config);\n        console.log(response)\n        return response.data.suggestions\n        /*\n        response.data.suggestions.map((suggest: any) => {\n            const lat = suggest.data.geo_lat;\n            const long = suggest.data.geo_lon;\n            const house = suggest.data.house;\n            const street = suggest.data.street;\n            console.log('The address is ', street,house)\n            console.log('The coordinates are ', lat, long)\n        )\n         */\n    }\n catch (error) {\n    console.error(\"Error:\", error);\n}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}